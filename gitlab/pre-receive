#!/bin/bash

##脚本提供功能：Commit提交的Message和代码规范是否符合统一规范
##分三个部分：
# 1.变量定义部分
# 2.校验部分：注释校验&代码分析
# 3.初始化入口
## 校验流程：
# 1.先做提交注释校验，校验的规则：是否是三行注释，第一行是否以${TYPE_LIST}定义的开头，且内容长度是否大于${COMMIT_MESSAGE_MIN_LENGTH}
# 2.校验分支名称是否是以$reponame-[0-9]|hotfixes-[0-9]|develop|release这几种分支，其余不允许新建删除


####### 初始化变量部分 #########

## 是否开启commit message的校验：0是，1否
CHECK_COMMIT_MESSAGE_ON=0
## 注释内容最小长度，默认20
COMMIT_MESSAGE_MIN_LENGTH=20
## 是否开启branch name的校验：0是，1否
CHECK_BRANCH_NAME_ON=0

## 定义提交开头类型字符规则
## e.g: fix:测试提交bug修复，Bug编号#12 
TYPE_LIST=(
         'feat:'   #新功能feature
         'update:' #在feat内修改
         'fix:'  #修补bug
         'docs:'  #文档
         'style:' #格式化，不影响代码运行的变动
         'refactor:' #重构 
         'pref:'  #性能优化
         'test:'  #增加测试
         'chore:'  #构建过程或辅助工具的变动
         #'[ci skip]'  #忽略校验
)

## 获取当前路径
BASE_PATH=$(cd `dirname $0`; pwd)

#定义和组装校验规则
declare -a regex_list
arrLen=${#TYPE_LIST[@]}
for ((i=0;i<$arrLen;i++)) do
  regex_list[i]='^'${TYPE_LIST[i]}
done
regex_list[$arrLen+1]='^[ci skip]:'
#echo "reg_list=== "${regex_list[@]}
separator="#[0-9]{1,}|"
## 合并成一个完整的正则表达式
regex="$( printf "${separator}%s" "${regex_list[@]}" )"
#echo "type regex: "$regex
## 去除头部的 |
regex=${regex:${#separator}}
#echo "regex: "$regex

## 定义注释出错提示信息
tips_msg="$( printf "${separator}%s" "${TYPE_LIST[@]}" )"
tips_msg=${tips_msg:${#separator}}
####### 初始化变量部分 #########

####### 校验部分：注释校验###########
## 校验commit message
validate_commit_message()
{
   oldrev=$(git rev-parse $1)
   newrev=$(git rev-parse $2)
   refname="$3"
   #echo 'Old version: '$oldrev
   #echo 'New version: '$newrev
   #echo 'Branch: '$refname

   ## git 命令
   #GITCMD="git"
   ## 按时间倒序列出 commit  找出两个版本之间差异的版本号集合  oldrev~newrev
   commitList=`git rev-list $oldrev..$newrev`
   #echo 'commitList: '$commitList
   
   split=($commitList)
   #echo 'split: '$split
   
   # 遍历数组
   for s in ${split[@]}
   do
      #echo "$s"
      #通过版本号获取仓库中对象实体的类型、大小和内容的信息
      #比如提交人、作者、邮件、提交时间、提交内容等
      currentContent=`git cat-file commit $s`
      #echo 'Commit obj: '$currentContent
      #获取提交内容
      
      msgline=`git cat-file commit $s | sed '1,/^$/d'|sed '/^$/d'|wc -l`
      #echo $msgline
      declare -a msg
      for ((i=0;i<$msgline;i++)) do
        msg[i]=`git cat-file commit $s | sed '1,/^$/d'|sed '/^$/d'|head -$(expr $i + 1)|tail -1`
      done
      #echo 'msg: '${msg[@]}
      
      ## merge合并分之直接放行
      if [[ $msg == *"Merge branch"* ]]; then
        echo "Merge branch...skip the checking"
      else
        msgnum=${#msg[@]}
	#echo $msgnum
	#echo ${msg[@]}
	#echo ${msg[1]}
        if [ "$msgline" != "3" ];then
          echo -e "Error: Comit message is less 3 line,please use \"git commit --amend\" update commit."
        exit 1
        fi
        ## 做内容校验 第一行
        match=`echo ${msg[0]} | grep -nE "(${regex})"`
        #echo 'Match result: '$match
        ## 找到匹配说明是符合规范的
        if [ "${match}" != "" ]; then
          ## 校验注释长度
          msg_length=${#msg}
          echo "Msg length: ${msg_length}"
          if [[ ${msg_length} -lt ${COMMIT_MESSAGE_MIN_LENGTH} ]]; then
            echo -e "Error: Commit message should be bigger than ${COMMIT_MESSAGE_MIN_LENGTH} and current commit message length: ${msg_length}"
            exit 1
          fi
          ## 其他操作
          echo "Commit Success!"
        else
          echo -e "Error: Commit comments message should be started with [${tips_msg}]..."
          exit 1
        fi
      fi
   done
}
####### 校验部分：注释校验###########

####### 校验部分：分支名称校验###########
## 分支名称校验
validate_ref()
{
	# --- Arguments
	oldrev=$(git rev-parse $1)
	newrev=$(git rev-parse $2)
	refname="$3"
	reponame=$(expr $(basename "$PWD") : "\(.*\).git")
#        echo "=============pre custom==============="
#        echo "$@"
#        echo "====oldrev is : "$oldrev
#        echo "====newrev is : "$newrev
#        echo "====refname is : "$refname

	allownonffpush=$( git config --bool hooks.allownonffpush )
	allowdeletebranch=$( git config --bool hooks.allowdeletebranch )
	allowdeletetag=$( git config --bool hooks.allowdeletetag )
	allowcreatenottopicbranch=$( git config --bool hooks.allowcreatenottopicbranch )
	# oldrev could be 0s which means creating refname
	# newrev could be 0s which means deleting refname

	case "$refname" in
		refs/heads/*)
			branch=$(expr "$refname" : "refs/heads/\(.*\)")
			#topicbranch=$(expr "$branch" : "\($reponame-[0-9]\{1,\}\|hotfixes-[0-9]\{1,\}\|develop\|release\)")
			topicbranch=$(expr "$branch" : "\($reponame-[0-9]\{1,\}\|hotfixes-[0-9]\{1,\}\|develop\)")
			topicuser=$(expr "$branch" : "\(.*\)/.*")
#			echo "====branch is : "$branch
#			echo "====topicbranch is : "$topicbranch
#			echo "====topicuser is : "$topicuser
			if [ 0 -ne $(expr "$newrev" : "0*$") ]; then # deleting
				echo "====删除分支：$branch===="
				# only topic branches can be deleted
				if [ "$allowdeletebranch" != "true" -a -z "$topicbranch" ]; then
					echo >&2 "*** Deleting the branch $branch is not permitted. ***"
					exit 1
				fi
				if [  "$allowdeletebranch" != "true" -a "$USER" != "$topicuser" ]; then
					echo "====USER is : "$USER
					echo >&2 "*** Deleting the branch $branch is not permitted by $USER. ***"
					exit 1
				fi
				return # Don't need to validate old revision
			else #updating
				if [ 0 -ne $(expr "$oldrev" : "0*$") ]; then # pushing a new branch
					echo "====创建新分支：$branch===="
					if [ "$allowcreatenottopicbranch" != "true" -a -z "$topicbranch" ]; then
						echo >&2 "*** creation of branch $branch is not permitted. ***"
						exit 1
					fi
					return # it's not a FF merge
				fi
				if [ $oldrev != $(git merge-base $oldrev $newrev) ]; then # non fast-forward
					# only topic branches can be non fast-forwarded
                    echo "====其他情况：$branch===="
					if [ "$allownonffpush" != "true" -a -z "$topicbranch" ]; then
						echo >&2 "*** Non fast-forward of branch $branch is not permitted. ***"
						exit 1
					fi
					if [  "$allownonffpush" != "true" -a "$USER" != "$topicuser" ]; then
                        echo "====USER is : "$USER
						echo >&2 "*** Non fast-forward of branch $branch is not permitted by $USER. ***"
						exit 1
					fi
				fi
			fi
			;;
		refs/tags/*)
			;;
		*)
			echo >&2 "*** pre-receive hook does not understand ref $refname in this repository. ***"
			echo >&2 "*** Contact the repository administrator. ***"
			exit 1
			;;
	esac
}

####### 校验部分：分支名称校验###########


####### 执行入口###########
pre_receive()
{
    #commit message 校验
	if [[ $CHECK_COMMIT_MESSAGE_ON == 0 ]]; then
	   validate_commit_message $1 $2 $3
	fi

    #branch name 校验
	if [[ $CHECK_BRANCH_NAME_ON == 0 ]]; then
	   validate_ref $1 $2 $3
	fi

}

# update hook触发会带参数执行if逻辑
# hooks脚本触发无参数执行else逻辑
if [ -n "$1" -a -n "$2" -a -n "$3" ]; then
    # Output to the terminal in command line mode - if someone wanted to
    # resend an email; they could redirect the output to sendmail
    # themselves
    pre_receive $2 $3 $1
    #echo $1'+'$2'+'$3
else
    while read oldrev newrev refname
    do
       pre_receive $oldrev $newrev $refname
       #echo $oldrev' '$newrev' '$refname
    done
fi
####### 执行入口###########
exit 0
